{"version":3,"file":"static/js/825.04f91e1d.chunk.js","mappings":"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","sources":["components/Contact.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { motion } from 'framer-motion';\r\nimport { useInView } from 'react-intersection-observer';\r\nimport { useForm } from 'react-hook-form';\r\nimport { Mail, Phone, MapPin, Send, Github, Linkedin, MessageCircle } from 'lucide-react';\r\n\r\ninterface ContactFormData {\r\n  name: string;\r\n  email: string;\r\n  subject: string;\r\n  message: string;\r\n}\r\n\r\nconst Contact: React.FC = () => {\r\n  const [ref, inView] = useInView({\r\n    threshold: 0.3,\r\n    triggerOnce: true,\r\n  });\r\n\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [submitStatus, setSubmitStatus] = useState<'idle' | 'success' | 'error'>('idle');\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    reset,\r\n    formState: { errors },\r\n  } = useForm<ContactFormData>();\r\n\r\n  const onSubmit = async (data: ContactFormData) => {\r\n    setIsSubmitting(true);\r\n    setSubmitStatus('idle');\r\n\r\n    try {\r\n      // Simulate form submission\r\n      await new Promise(resolve => setTimeout(resolve, 2000));\r\n      \r\n      // Here you would typically send the data to your backend\r\n      console.log('Form data:', data);\r\n      \r\n      setSubmitStatus('success');\r\n      reset();\r\n    } catch (error) {\r\n      setSubmitStatus('error');\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const handleEmailClick = (e: React.MouseEvent) => {\r\n    e.preventDefault();\r\n    const email = \"saitarunreddye@gmail.com\";\r\n    \r\n    // Copy email to clipboard\r\n    navigator.clipboard.writeText(email).then(() => {\r\n      // Show a temporary notification\r\n      const notification = document.createElement('div');\r\n      notification.textContent = `Email copied: ${email}`;\r\n      notification.style.cssText = `\r\n        position: fixed;\r\n        top: 20px;\r\n        right: 20px;\r\n        background: #000;\r\n        color: #fff;\r\n        padding: 12px 20px;\r\n        border-radius: 8px;\r\n        z-index: 10000;\r\n        font-size: 14px;\r\n        box-shadow: 0 4px 12px rgba(0,0,0,0.3);\r\n        animation: slideIn 0.3s ease;\r\n      `;\r\n      \r\n      // Add animation keyframes\r\n      const style = document.createElement('style');\r\n      style.textContent = `\r\n        @keyframes slideIn {\r\n          from { transform: translateX(100%); opacity: 0; }\r\n          to { transform: translateX(0); opacity: 1; }\r\n        }\r\n      `;\r\n      document.head.appendChild(style);\r\n      \r\n      document.body.appendChild(notification);\r\n      \r\n      // Remove notification after 3 seconds\r\n      setTimeout(() => {\r\n        notification.remove();\r\n        style.remove();\r\n      }, 3000);\r\n    });\r\n  };\r\n\r\n  const contactInfo = [\r\n    {\r\n      icon: Mail,\r\n      title: \"Email\",\r\n      value: \"saitarunreddye@gmail.com\",\r\n      link: \"mailto:saitarunreddye@gmail.com\"\r\n    },\r\n    {\r\n      icon: Phone,\r\n      title: \"Phone\",\r\n      value: \"+1 (940) 285-0439\",\r\n      link: \"tel:+19402850439\"\r\n    },\r\n    {\r\n      icon: MapPin,\r\n      title: \"Location\",\r\n      value: \"Cleveland, OH\",\r\n      link: \"#\"\r\n    }\r\n  ];\r\n\r\n  const socialLinks = [\r\n    {\r\n      icon: Github,\r\n      name: \"GitHub\",\r\n      url: \"https://github.com/saitarunreddye\",\r\n      color: \"#333\"\r\n    },\r\n    {\r\n      icon: Linkedin,\r\n      name: \"LinkedIn\",\r\n      url: \"https://linkedin.com/in/esaitarun\",\r\n      color: \"#0077b5\"\r\n    }\r\n  ];\r\n\r\n  return (\r\n    <motion.div\r\n      ref={ref}\r\n      className=\"contact-section\"\r\n      initial={{ opacity: 0 }}\r\n      animate={inView ? { opacity: 1 } : {}}\r\n      transition={{ duration: 0.8 }}\r\n    >\r\n      <div className=\"container\">\r\n        <motion.div\r\n          className=\"section-header\"\r\n          initial={{ opacity: 0, y: 30 }}\r\n          animate={inView ? { opacity: 1, y: 0 } : {}}\r\n          transition={{ duration: 0.8, delay: 0.2 }}\r\n        >\r\n          <h2 className=\"section-title\">\r\n            Get In <span className=\"gradient-text\">Touch</span>\r\n          </h2>\r\n          <p className=\"section-subtitle\">\r\n            Let's discuss your next project or just say hello\r\n          </p>\r\n        </motion.div>\r\n\r\n        <div className=\"contact-content\">\r\n          {/* Contact Information */}\r\n          <motion.div\r\n            className=\"contact-info\"\r\n            initial={{ opacity: 0, x: -50 }}\r\n            animate={inView ? { opacity: 1, x: 0 } : {}}\r\n            transition={{ duration: 0.8, delay: 0.4 }}\r\n          >\r\n            <h3>Let's Connect</h3>\r\n            <p>\r\n              I'm always interested in new opportunities and exciting projects. \r\n              Whether you have a question or just want to say hi, feel free to reach out!\r\n            </p>\r\n\r\n            <div className=\"contact-details\">\r\n              {contactInfo.map((info, index) => (\r\n                <motion.a\r\n                  key={info.title}\r\n                  href={info.link}\r\n                  className=\"contact-item glass\"\r\n                  initial={{ opacity: 0, y: 20 }}\r\n                  animate={inView ? { opacity: 1, y: 0 } : {}}\r\n                  transition={{ duration: 0.5, delay: 0.6 + index * 0.1 }}\r\n                  whileHover={{ scale: 1.05, y: -2 }}\r\n                  onClick={info.title === \"Email\" ? handleEmailClick : undefined}\r\n                >\r\n                  <div className=\"contact-icon\">\r\n                    <info.icon size={24} />\r\n                  </div>\r\n                  <div className=\"contact-text\">\r\n                    <h4>{info.title}</h4>\r\n                    <p>{info.value}</p>\r\n                  </div>\r\n                </motion.a>\r\n              ))}\r\n            </div>\r\n\r\n            <div className=\"social-links\">\r\n              <h4>Follow Me</h4>\r\n              <div className=\"social-grid\">\r\n                {socialLinks.map((social, index) => (\r\n                  <motion.a\r\n                    key={social.name}\r\n                    href={social.url}\r\n                    target=\"_blank\"\r\n                    rel=\"noopener noreferrer\"\r\n                    className=\"social-link\"\r\n                    initial={{ opacity: 0, scale: 0 }}\r\n                    animate={inView ? { opacity: 1, scale: 1 } : {}}\r\n                    transition={{ duration: 0.3, delay: 1 + index * 0.1 }}\r\n                    whileHover={{ scale: 1.2, y: -5 }}\r\n                    whileTap={{ scale: 0.9 }}\r\n                  >\r\n                    <social.icon size={24} />\r\n                    <span className=\"social-name\">{social.name}</span>\r\n                  </motion.a>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </motion.div>\r\n\r\n          {/* Contact Form */}\r\n          <motion.div\r\n            className=\"contact-form-container\"\r\n            initial={{ opacity: 0, x: 50 }}\r\n            animate={inView ? { opacity: 1, x: 0 } : {}}\r\n            transition={{ duration: 0.8, delay: 0.6 }}\r\n          >\r\n            <div className=\"contact-form glass\">\r\n              <h3>Send a Message</h3>\r\n              \r\n              <form onSubmit={handleSubmit(onSubmit)} className=\"form\">\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"name\">Name</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"name\"\r\n                    {...register('name', { required: 'Name is required' })}\r\n                    className={errors.name ? 'error' : ''}\r\n                    placeholder=\"Your name\"\r\n                  />\r\n                  {errors.name && (\r\n                    <span className=\"error-message\">{errors.name.message}</span>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"email\">Email</label>\r\n                  <input\r\n                    type=\"email\"\r\n                    id=\"email\"\r\n                    {...register('email', { \r\n                      required: 'Email is required',\r\n                      pattern: {\r\n                        value: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,}$/i,\r\n                        message: 'Invalid email address'\r\n                      }\r\n                    })}\r\n                    className={errors.email ? 'error' : ''}\r\n                    placeholder=\"your.email@example.com\"\r\n                  />\r\n                  {errors.email && (\r\n                    <span className=\"error-message\">{errors.email.message}</span>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"subject\">Subject</label>\r\n                  <input\r\n                    type=\"text\"\r\n                    id=\"subject\"\r\n                    {...register('subject', { required: 'Subject is required' })}\r\n                    className={errors.subject ? 'error' : ''}\r\n                    placeholder=\"What's this about?\"\r\n                  />\r\n                  {errors.subject && (\r\n                    <span className=\"error-message\">{errors.subject.message}</span>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                  <label htmlFor=\"message\">Message</label>\r\n                  <textarea\r\n                    id=\"message\"\r\n                    rows={5}\r\n                    {...register('message', { \r\n                      required: 'Message is required',\r\n                      minLength: {\r\n                        value: 10,\r\n                        message: 'Message must be at least 10 characters'\r\n                      }\r\n                    })}\r\n                    className={errors.message ? 'error' : ''}\r\n                    placeholder=\"Tell me about your project...\"\r\n                  />\r\n                  {errors.message && (\r\n                    <span className=\"error-message\">{errors.message.message}</span>\r\n                  )}\r\n                </div>\r\n\r\n                <motion.button\r\n                  type=\"submit\"\r\n                  className={`submit-btn ${isSubmitting ? 'loading' : ''}`}\r\n                  disabled={isSubmitting}\r\n                  whileHover={{ scale: 1.05 }}\r\n                  whileTap={{ scale: 0.95 }}\r\n                >\r\n                  {isSubmitting ? (\r\n                    <div className=\"loading-spinner\">\r\n                      <div className=\"spinner\"></div>\r\n                      Sending...\r\n                    </div>\r\n                  ) : (\r\n                    <>\r\n                      <Send size={20} />\r\n                      Send Message\r\n                    </>\r\n                  )}\r\n                </motion.button>\r\n\r\n                {submitStatus === 'success' && (\r\n                  <motion.div\r\n                    className=\"success-message\"\r\n                    initial={{ opacity: 0, y: 10 }}\r\n                    animate={{ opacity: 1, y: 0 }}\r\n                  >\r\n                    <MessageCircle size={20} />\r\n                    Message sent successfully! I'll get back to you soon.\r\n                  </motion.div>\r\n                )}\r\n\r\n                {submitStatus === 'error' && (\r\n                  <motion.div\r\n                    className=\"error-message\"\r\n                    initial={{ opacity: 0, y: 10 }}\r\n                    animate={{ opacity: 1, y: 0 }}\r\n                  >\r\n                    Something went wrong. Please try again.\r\n                  </motion.div>\r\n                )}\r\n              </form>\r\n            </div>\r\n          </motion.div>\r\n        </div>\r\n      </div>\r\n    </motion.div>\r\n  );\r\n};\r\n\r\nexport default Contact;\r\n"],"names":["Contact","ref","inView","useInView","threshold","triggerOnce","isSubmitting","setIsSubmitting","useState","submitStatus","setSubmitStatus","register","handleSubmit","reset","formState","errors","useForm","handleEmailClick","e","preventDefault","email","navigator","clipboard","writeText","then","notification","document","createElement","textContent","concat","style","cssText","head","appendChild","body","setTimeout","remove","contactInfo","icon","Mail","title","value","link","Phone","MapPin","socialLinks","Github","name","url","color","Linkedin","_jsx","motion","div","className","initial","opacity","animate","transition","duration","children","_jsxs","y","delay","x","map","info","index","a","href","whileHover","scale","onClick","undefined","size","social","target","rel","whileTap","onSubmit","async","Promise","resolve","console","log","data","error","htmlFor","_objectSpread","type","id","required","placeholder","message","pattern","subject","rows","minLength","button","disabled","_Fragment","Send","MessageCircle"],"sourceRoot":""}